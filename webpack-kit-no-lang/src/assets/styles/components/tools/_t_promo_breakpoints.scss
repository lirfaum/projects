// Пример вывода

// @include breakpoints-compile(
//   $until: md
// ){
//     width: auto;
//     text-align: left;
//     padding-left: 60px;
//     max-width: 420px;
// };

// BREAKPOINTS W
$breakpoints-width: (
    'mobile' : 416px,
    'tablet' : 960px,
    'sm'     : 1024px,
    'md'     : 1280px,
    'lg'     : 1440px
) !default;

// BREAKPOINTS H
$breakpoints-height: (
        'xsm' : 600px,
        'sm'  : 700px,
        'md' : 800px,
        'lg'  : 900px
) !default;

$media-type: all !default;
$static-breakpoint: large !default;
$responsive-breakpoints: true !default;

$difoult-animation-time: 1s;

// BREAKPOINTS

$show-breakpoints: () !default;

@function get-breakpoint($name, $breakpoints) {
    @if map-has-key($breakpoints, $name) {
        @return map-get($breakpoints, $name);
    } @else {
        @warn "Breakpoint #{$name} wasn't found in $breakpoints.";
    }
}

@mixin breakpoints-compile(
    $from: false,
    $until: false,
    $and: false,
    $media-type: $media-type,
    $breakpoints: false,
    $responsive: $responsive-breakpoints,
    $static-breakpoint: $static-breakpoint,
    $direction: width,
    $i: false
) {
    $min: 0;
    $max: 0;
    @if $breakpoints == false and $direction != false {
      $breakpoints: if($direction == 'height', $breakpoints-height, $breakpoints-width);
    }
    $media-query: '';

    @if $from {
        @if type-of($from) == number {
            $min: em($from);
        } @else {
            $min: em(get-breakpoint($from, $breakpoints));
        }
    }

    @if $until {
        @if type-of($until) == number {
            $max: em($until);
        } @else {
            $max: em(get-breakpoint($until, $breakpoints)) - .01em;
        }
    }

    @if $responsive == false {
        $static-breakpoint: get-breakpoint($static-breakpoint, $breakpoints);
        $target: em($static-breakpoint);


        @if (
            $and == false
            and $min <= $target
            and (
                $until == false or $max >= $target
            )
        ) {
            @content;
        }
    }


    @else {
        @if $min != 0 { $media-query: '#{$media-query} and (min-#{$direction}: #{$min})'; }
        @if $max != 0 { $media-query: '#{$media-query} and (max-#{$direction}: #{$max})'; }
        @if $and            { $media-query: '#{$media-query} and #{$and}'; }

        @if ($media-type == 'all' and $media-query != '') {
            $media-type: '';
            $media-query: str-slice(unquote($media-query), 6);
        }

        @media #{$media-type + $media-query} {
            @content;
        }
    }
}
@mixin add-breakpoint($name, $width , $direction) {
    $new-breakpoint: ($name: $width );
    $breakpoints: if($direction == 'height', $breakpoints-height, $breakpoints-width);
    $breakpoints: map-merge($breakpoints, $new-breakpoint) !global;
}

@mixin custom-before-el($content-ff: none, $content: "", $content-fz: none, $content-color: none) {
  &:before {
    content:"#{$content}";
    font-family: $content-ff;
    font-size: $content-fz;
    color: $content-color;
    position: absolute;
    left: 0;
  }
}

@mixin list($b-offset, $left-offset, $li-offsets: false, $list-style-type: false){
  margin-bottom: $b-offset;
  padding-left: $left-offset;

  @if $list-style-type != false {
    list-style-type: $list-style-type;
  }
  li {
    @if $li-offsets != false {
      padding: $li-offsets;
    }
    width: 100%;
  }
};

@mixin close($fz, $color, $left, $right, $top, $icon, $class: 'close'){
  .#{$class} {
    right: $right;
    left: $left;
    top: $top;
    @if $color != false {
      color: $color;
    }
    font-size: $fz;
    @extend #{$icon};
  }
};

@mixin close($fz, $color, $left, $right, $top, $icon, $class: '.close'){
  #{$class} {
    position: absolute;
    right: $right;
    left: $left;
    top: $top;
    color: $color;
    font-size: $fz;
    @if $icon != false {
      @extend #{$icon};
    }
  }
};
